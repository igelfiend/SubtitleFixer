#ifndef TEST_SUBTITLES_FIXER_H
#define TEST_SUBTITLES_FIXER_H

#include <QtTest>
#include <QDebug>
#include <QFile>
#include <QString>
#include <QTextStream>
#include <QStringList>
#include <QSharedPointer>

#include "auto_test.h"
#include "fixtures/fixture_subtitle.h"
#include "subtitles_fixer.h"
#include "settings.h"
//#include "auto_test_utils.h"
//#include "string_helper.h"

typedef QSharedPointer< QTemporaryFile > QTemporaryFilePtr;

class TestSubtitlesFixer : public QObject
{
    Q_OBJECT

public:
    TestSubtitlesFixer() { }
    ~TestSubtitlesFixer() { }

private:
    QTemporaryFilePtr prepareInputFile(const QStringList &data) const;
    QTemporaryFilePtr prepareOutputFile() const;
    QStringList getDataFromFile( QTemporaryFilePtr file ) const;

private slots:
    void TestFixFileUpdateFontnameAndFontsize();
    void TestFixFileUpdateFontname();
    void TestFixFileUpdateFontsize();
    void TestFixFileHasErrorOnFail();
};

inline QTemporaryFilePtr TestSubtitlesFixer::prepareInputFile(const QStringList &data) const
{
    QTemporaryFilePtr inputFile( new QTemporaryFile() );
    inputFile->open();
    QTextStream inStream( inputFile.get() );
    for( const auto &row: data )
    {
        inStream << row << '\n';
    }
    inputFile->close();

    return inputFile;
}

inline QTemporaryFilePtr TestSubtitlesFixer::prepareOutputFile() const
{
    QTemporaryFilePtr outputFile( new QTemporaryFile() );
    outputFile->open();
    outputFile->close();

    return outputFile;
}

inline QStringList TestSubtitlesFixer::getDataFromFile(QTemporaryFilePtr file) const
{
    QStringList dataLines;
    file->open();
    QTextStream stream( file.get() );

    while( !stream.atEnd() )
    {
        dataLines << stream.readLine();
    }

    return dataLines;
}

inline void TestSubtitlesFixer::TestFixFileUpdateFontnameAndFontsize()
{
    const QStringList &data = regularSubtitleData;

    Settings settings;
    settings.setIncreaseFontSize( 20 );
    settings.setNewFontName( "Tahoma" );

    SubtitlesFixer fixer;
    fixer.setSettings( settings );

    QTemporaryFilePtr inputFile  = prepareInputFile( data );
    QTemporaryFilePtr outputFile = prepareOutputFile();

    bool result = fixer.fixFile( inputFile->fileName(), outputFile->fileName() );

    QStringList resultLines = getDataFromFile( outputFile );

    const QStringList expectedLines{
        "[Script Info]",
        "; Script generated by Aegisub 3.2.2",
        "ScaledBorderAndShadow: no",
        "ScriptType: v4.00+",
        "PlayResX: 640",
        "",
        "",
        "[Aegisub Project Garbage]",
        "",
        "[V4+ Styles]",
        "Format: Name, Fontname, Fontsize, PrimaryColour",
        "Style: Main,Tahoma,62,&H00FFFFFF",
        "Style: Dialog,Tahoma,42,&H00FFFFFF",
        "[Events]",
        "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text",
        "Dialogue: 0,0:02:35.97,0:02:39.04,Main,Lilith,0,0,0,,Main dialog row.",
        "Dialogue: 0,0:02:40.38,0:02:44.20,Dialog,lilith,0,0,0,,Dialog subtitle row.",
    };

    QVERIFY(result);
    QCOMPARE_EQ( expectedLines, resultLines );
}

inline void TestSubtitlesFixer::TestFixFileUpdateFontname()
{
    const QStringList &data = regularSubtitleData;

    Settings settings;
    settings.setNewFontName( "Tahoma" );

    SubtitlesFixer fixer;
    fixer.setSettings( settings );

    QTemporaryFilePtr inputFile  = prepareInputFile( data );
    QTemporaryFilePtr outputFile = prepareOutputFile();

    bool result = fixer.fixFile( inputFile->fileName(), outputFile->fileName() );

    QStringList resultLines = getDataFromFile( outputFile );

    const QStringList expectedLines{
        "[Script Info]",
        "; Script generated by Aegisub 3.2.2",
        "ScaledBorderAndShadow: no",
        "ScriptType: v4.00+",
        "PlayResX: 640",
        "",
        "",
        "[Aegisub Project Garbage]",
        "",
        "[V4+ Styles]",
        "Format: Name, Fontname, Fontsize, PrimaryColour",
        "Style: Main,Tahoma,42,&H00FFFFFF",
        "Style: Dialog,Tahoma,22,&H00FFFFFF",
        "[Events]",
        "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text",
        "Dialogue: 0,0:02:35.97,0:02:39.04,Main,Lilith,0,0,0,,Main dialog row.",
        "Dialogue: 0,0:02:40.38,0:02:44.20,Dialog,lilith,0,0,0,,Dialog subtitle row.",
    };

    QVERIFY(result);
    QCOMPARE_EQ( expectedLines, resultLines );
}

inline void TestSubtitlesFixer::TestFixFileUpdateFontsize()
{
    const QStringList &data = regularSubtitleData;

    Settings settings;
    settings.setIncreaseFontSize( 20 );

    SubtitlesFixer fixer;
    fixer.setSettings( settings );

    QTemporaryFilePtr inputFile  = prepareInputFile( data );
    QTemporaryFilePtr outputFile = prepareOutputFile();

    bool result = fixer.fixFile( inputFile->fileName(), outputFile->fileName() );

    QStringList resultLines = getDataFromFile( outputFile );

    const QStringList expectedLines{
        "[Script Info]",
        "; Script generated by Aegisub 3.2.2",
        "ScaledBorderAndShadow: no",
        "ScriptType: v4.00+",
        "PlayResX: 640",
        "",
        "",
        "[Aegisub Project Garbage]",
        "",
        "[V4+ Styles]",
        "Format: Name, Fontname, Fontsize, PrimaryColour",
        "Style: Main,Calibri,62,&H00FFFFFF",
        "Style: Dialog,Times New Roman,42,&H00FFFFFF",
        "[Events]",
        "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text",
        "Dialogue: 0,0:02:35.97,0:02:39.04,Main,Lilith,0,0,0,,Main dialog row.",
        "Dialogue: 0,0:02:40.38,0:02:44.20,Dialog,lilith,0,0,0,,Dialog subtitle row.",
    };

    QVERIFY(result);
    QCOMPARE_EQ( expectedLines, resultLines );
}

inline void TestSubtitlesFixer::TestFixFileHasErrorOnFail()
{
    const QStringList data{
        "Format: Name, Fontname, Fontsize, PrimaryColour",
        "Style: Main,Calibri,42,&H00FFFFFF",
        "Style: Dialog,Times New Roman,22,&H00FFFFFF",
    };
    Settings settings;
    settings.setIncreaseFontSize( 20 );

    SubtitlesFixer fixer;
    fixer.setSettings( settings );

    QTemporaryFilePtr inputFile  = prepareInputFile( data );
    QTemporaryFilePtr outputFile = prepareOutputFile();

    bool result = fixer.fixFile( inputFile->fileName(), outputFile->fileName() );
    qDebug().noquote() << "error: " << fixer.getError();
    QStringList resultLines = getDataFromFile( outputFile );

    QVERIFY( !result );
}

DECLARE_TEST(TestSubtitlesFixer)

#endif // TEST_SUBTITLES_FIXER_H
