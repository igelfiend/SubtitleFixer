#ifndef TEST_SUBTITLE_DATA_SERIALIZER_H
#define TEST_SUBTITLE_DATA_SERIALIZER_H


#include <QtTest>
#include <QDebug>
#include <QFile>
#include <QTemporaryFile>
#include <QString>
#include <QStringList>

#include "auto_test.h"
#include "reader/subtitle_data_serializer.h"
#include "reader/subtitle_block.h"
#include "reader/subtitle_row.h"

class TestSubtitleDataSerializer: public QObject
{
    Q_OBJECT
public:
    TestSubtitleDataSerializer() = default;
    ~TestSubtitleDataSerializer() = default;

private:
    void fillFileWithData(QFile &file, const QStringList &data);

private slots:
    void TestReadFromFileRaiseExceptionOnReadFail();
    void TestReadFromFile();
};

class QFileMocked: public QFile
{
public:
    QFileMocked(const QString &path): QFile(path)
    { }

    bool open(OpenMode flags) override
    {
        Q_UNUSED(flags);
        return false;
    }
};

inline void TestSubtitleDataSerializer::fillFileWithData(QFile &file, const QStringList &data)
{
    if( file.open( QIODevice::WriteOnly | QIODevice::Text) )
    {
        QTextStream out( &file );

        for( const QString &line: data )
        {
            out << line << '\n';
        }

        file.close();
    }
    else
    {
        qCritical() << "Failed to open file!";
    }
}

inline void TestSubtitleDataSerializer::TestReadFromFileRaiseExceptionOnReadFail()
{
    QFileMocked tempFile("tempfile.txt");

    // In a fact there are FileNotOpenedException exception, but somehow i can't catch it :(
    QVERIFY_THROWS_EXCEPTION( std::runtime_error, SubtitleDataSerializer::readFromFile( tempFile ) );
}

inline void TestSubtitleDataSerializer::TestReadFromFile()
{
    QStringList data{
        "[Script Info]",
        "; Script generated by Aegisub 3.2.2",
        "ScaledBorderAndShadow: no",
        "ScriptType: v4.00+",
        "PlayResX: 640",
        "",
        "",
        "[Aegisub Project Garbage]",
        "",
        "[V4+ Styles]",
        "Format: Name, Fontname, Fontsize, PrimaryColour",
        "Style: Main,Calibri,42,&H00FFFFFF",
        "[Events]",
        "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text",
        "Dialogue: 0,0:02:35.97,0:02:39.04,Main,Lilith,0,0,0,,Subtitle text1.",
        "Dialogue: 0,0:02:40.38,0:02:44.20,Main,lilith,0,0,0,,Text subtitle2.",
    };

    SubtitleData expectedData{
        QList<SubtitleBlock>{
            SubtitleBlock{
                "Script Info",
                {
                    SubtitleRowPtr( new HeaderSubtitleRow( "[Script Info]" ) ),
                    SubtitleRowPtr( new CommentSubtitleRow( "; Script generated by Aegisub 3.2.2" ) ),
                    SubtitleRowPtr( new ContentSubtitleRow( "ScaledBorderAndShadow: no" ) ),
                    SubtitleRowPtr( new ContentSubtitleRow( "ScriptType: v4.00+" ) ),
                    SubtitleRowPtr( new ContentSubtitleRow( "PlayResX: 640" ) ),
                    SubtitleRowPtr( new EmptySubtitleRow() ),
                    SubtitleRowPtr( new EmptySubtitleRow() ),
                },
            },
            SubtitleBlock{
                "Aegisub Project Garbage",
                {
                    SubtitleRowPtr( new HeaderSubtitleRow( "[Aegisub Project Garbage]" ) ),
                    SubtitleRowPtr( new EmptySubtitleRow() ),
                },
            },
            SubtitleBlock{
                "V4+ Styles",
                {
                    SubtitleRowPtr( new HeaderSubtitleRow( "[V4+ Styles]" ) ),
                    SubtitleRowPtr( new FormatterSubtitleRow( "Format: Name, Fontname, Fontsize, PrimaryColour" ) ),
                    SubtitleRowPtr( new ContentSubtitleRow( "Style: Main,Calibri,42,&H00FFFFFF" ) ),
                },
            },
            SubtitleBlock{
                "Events",
                {
                    SubtitleRowPtr( new HeaderSubtitleRow( "[Events]" ) ),
                    SubtitleRowPtr( new FormatterSubtitleRow( "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text" ) ),
                    SubtitleRowPtr( new ContentSubtitleRow( "Dialogue: 0,0:02:35.97,0:02:39.04,Main,Lilith,0,0,0,,Subtitle text1." ) ),
                    SubtitleRowPtr( new ContentSubtitleRow( "Dialogue: 0,0:02:40.38,0:02:44.20,Main,lilith,0,0,0,,Text subtitle2." ) ),
                },
            },
        }
    };

    QTemporaryFile file;
    fillFileWithData( file, data );

    SubtitleData result = SubtitleDataSerializer::readFromFile( file );


    QCOMPARE_EQ(expectedData, result);
}

DECLARE_TEST( TestSubtitleDataSerializer );


#endif // TEST_SUBTITLE_DATA_SERIALIZER_H
